# C Tutorial

-Format Specifiers
    Special Tokens that begin with % symbol
    followed by a character that specifies data type
    and optional modifiers (width, precision, flags)
    They control how data is displayed or interpreted

    int: %d
    float: %f
    double: %lf
    char: %c
    string: $s (string is array of characters)
    width: %nd (n= any numbers to specify total width of number displayed)
        %3d =   1;
        %03d= 001;
        %-3d= 1  ;
        %+d = +1; //would display if number is =ve or -ve
    precision: default for float is ti display 6 digits after decimal, hence 1 is displayed as 1.000000
        %.nf : to display n digits after decimal (output is rounded)
    Width, precision and flags could be combined
        %+7.2f is one example

-Use strings
    string in C is an array of characters
    to get input as %c always add a space before %c to eliminate the extra space from input buffer
    to get input with space in string use fgets()
    fgets([name of string variable], [length of variable], [name of library for input])
        fgets(name, strlen(name), stdin)
        strlen uses string.h library
    Also to eliminate the last \n character from input buffer when you type string and press enter use:
        getchar() //gets \n char from input buffer
        name[strlen(name)-1]='\0'; //this puts last char as nul char

- toupper()
    - It would need <ctype.h> header file.
    - toupper('a') = 'A';

- strncopy():
    - uses <string.h>
    - could be used to assign a value to a variable
    -Example:
        strncpy(variableName, "String");
    //reference in structExample.c

-Math lib
    to use math lib us <math.h> library
    Few example:
        sqrt(x)  : square root of x
        pow(x,n) : x raised to the power n
        round(x) : x rounded to nearest number
        ceil(x)  : x rounded up to next number
        floor(x) : x rounded down to prior number
        abs(x)   : gives number as +ve
        log(x)   : natural log of x
        trigonometry  with x in radians
        sin(x), cos(x), tan(x)

- Sleep(n)
    A function specifically helpful during countdown
    use header file: <windows.h> //for windows & function: Sleep(n)
                     <unistd.h> //for linux/mac & function: sleep(n)
    n is in milliseconds
    Sleep(1000) could delay program by 1 second

- rand()
    the normal application of random function in c could cause same numbers as output.
    The reason, is that seed value given to the function remains same.
    To correct that time() could be used, to give given system time to function
    and output random num each time.
     Example:
        #include <stdlib.h>
         #include <time.h>
        srand(time(NULL)); // NULL or 0 could be used
        printf("%d", rand()); //would output diff num each time
    To check max num for rand() accord to OS and compiler try RAND_MAX() const.
    Using:
        int x= (rand() % 2); //will give random num as 0 or 1
        int x= (rand() % 2) + 1; // will give 1 or 2
        int x= (rand() % (max - min + 1)) + min; //will give num between range of max and min

**C doesn't automatically clear out memory automatically.
- array
    - A fixed-size collection of elements of the same data type.
    Partially initializing array:
    int scores[5] = {0}; //would initialize all address values as 0 instead of garbage value.
    example codes: arrayAverage.c
    - 2D array: an array where each element is an array
    especially useful if need grid or matrix of data
    But drawback is that number of columns needs to be specified while intializing the array
    int numbers[][3] = {{},{},{}}
    - size of array = sizeof(arrayName) / sizeof(arrayName[0]);
    Example: int size = sizeof(scores) / sizeof(scores[0]);

- typedef:
    reserved keyword that gives an existing datatype a "nickname"
    Helps simplify complex types and improves code readability.
    - typedef existing_type new_name;
    - typedef int Number;
    - typedef char String[sizeNeeded]; /or/ just char *String[];
    - for char user[] = "ST"; = typedef char String[3]; //because we count the nul terminator
        "ST" == 'S', 'T', '\0';

- enum / enumerations:
    - A user-defined data type that consists of a set of named integer constants.
    - Benefit: Replaces numbers with readable names.
    - In C, all constants are capital letters
    - By default, first constant's value would be 0
    //refer to enumExample.c
    Example:
    enum Day{SUNDAY, MONDAY, TUESDAY}; //(You could assign value to constants; SUNDAY=2 etc; By default SUNDAY=0)
    //its like: int a, b, c;
    int main(){
        enum Day today = SUNDAY;
        //Day is data type; today is variable; SUNDAY is value assigned;
    }
    //
    //other way to avoid writing enum each time before data type
    //
    typedef enum{
        SUNDAY, MONDAY, TUESDAY
    }DAY; //the enum set is typedef to DAY
    int main(){
        Day today = Monday; //no need to mention enum here
    }

- struct:
    - A custom container that holds multiple pieces of related information
      Similar to objects in other languages. C version of OOP
    - Think struct as an blueprint
    - could hold different dataType values
    - typedef is used similar to enum
    - to access a member of struct use dot operator // member access operator
      structVariableName.structMember
    - to intialise value of struct:
      StructName variable = {0};
    //refer to structExample.c

- array of structs:
    - array where each element contains a struct{}
    - Helps organize and groups together related data.

- pointer:
    - A variable that stores the memory address of another variable.
    - Benefit: They help avoid wasting memory by allowing you to pass
               the address of a large data structure instead of copying the entire data.
    - visualise * (dereference pointer) as a key to unlock memory address.
    - a pointer is just an address to another variable.
    // refer to pointerExample.c

- FILE:
    - we can read and write a file in C
    - <stdio.h> has built in struct called FILE
    - function:
        fopen(); //fopen("name.txt", "w"); (w= write and r= read)
        fclose();
        fprintf(); // with 3 arguments: (pFile, "%s", text);
        fgets(); //arguments: buffer(storing place), size of buffer, pointer of file
    - if file couldn't be opened, it return NULL
    - for writing absolute path: use double'\' (\\), else C might think it is a excape sequence
    - Buffer: like a waiting room and temporarily stores data
    - a good size to give buffer 1024 bytes = 1kb
    // refer to filewithC folder

- malloc():
    - A function in C that dynamically allocates 
      a specified number of bytes in memory.
    - uses <stdlib.h>
    - is used if we do not the size we need to reserve in memory for data entry
    - then we could use malloc() by allocating it to pointer
    - the memory reserved from 'Heap'. In most cases memory is used in 'Stack'
    - after done using malloc(), we have to return space/ memory
        - free up space: using free();
    - reset the pointer too; pointer == key to space
        - pointer = NULL;
        - this avoids dangling pointers; pointing to unused memory
        - before this check if pointer is NULL else could cause segmentation fault
            -occurs when a program attempts to access memory location that can no longer be accessed.
    // refer mallocExample.c

- calloc():
    - Contiguous Allocation -- clear allocation
    - <stdlib.h>
    - Allocates memory dynamically and sets all allocated bytes to 0.
    - malloc() is faster, but calloc() leads to less bugs
    - calloc(#inputNum, size)
    - benefit: would make sure the space reserved is initialised to 0 rather than garbage values. Hence, less bugs
    //refer to callocExample.c

- realloc():
    - Reallocation: resize previously allocated memory.
    - <stdlib.h>
    - realloc(ptr, bytes)
    - after the prices are already entered by user: what if we wanna add/remove from dynamiv memory
    - realloc() returns new pointer of memory and recalculates/frees old memory
    // refer to reallocExample.c