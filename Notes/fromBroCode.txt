-Format Specifiers
    Special Tokens that begin with % symbol
    followed by a character that specifies data type
    and optional modifiers (width, precision, flags)
    They control how data is displayed or interpreted

    int: %d
    float: %f
    double: %lf
    char: %c
    string: $s (string is array of characters)
    width: %nd (n= any numbers to specify total width of number displayed)
        %3d =   1;
        %03d= 001;
        %-3d= 1  ;
        %+d = +1; //would display if number is =ve or -ve
    precision: default for float is ti display 6 digits after decimal, hence 1 is displayed as 1.000000
        %.nf : to display n digits after decimal (output is rounded)
    Width, precision and flags could be combined
        %+7.2f is one example

-Use strings
    string in C is an array of characters
    to get input as %c always add a space before %c to eliminate the extra space from input buffer
    to get input with space in string use fgets()
    fgets([name of string variable], [length of variable], [name of library for input])
        fgets(name, strlen(name), stdin)
        strlen uses string.h library
    Also to eliminate the last \n character from input buffer when you type string and press enter use:
        getchar() //gets \n char from input buffer
        name[strlen(name)-1]='\0'; //this puts last char as nul char

-Math lib
    to use math lib us <math.h> library
    Few example:
        sqrt(x)  : square root of x
        pow(x,n) : x raised to the power n
        round(x) : x rounded to nearest number
        ceil(x)  : x rounded up to next number
        floor(x) : x rounded down to prior number
        abs(x)   : gives number as +ve
        log(x)   : natural log of x
        trigonometry  with x in radians
        sin(x), cos(x), tan(x)

- Sleep(n)
    A function specifically helpful during countdown
    use header file: <windows.h> //for windows & function: Sleep(n)
                     <unistd.h> //for linux/mac & function: sleep(n)
    n is in milliseconds
    Sleep(1000) could delay program by 1 second

- rand()
    the normal application of random function in c could cause same numbers as output.
    The reason, is that seed value given to the function remains same.
    To correct that time() could be used, to give given system time to function
    and output random num each time.
     Example:
        #include <stdlib.h>
         #include <time.h>
        srand(time(NULL)); // NULL or 0 could be used
        printf("%d", rand()); //would output diff num each time
    To check max num for rand() accord to OS and compiler try RAND_MAX() const.
    Using:
        int x= (rand() % 2); //will give random num as 0 or 1
        int x= (rand() % 2) + 1; // will give 1 or 2
        int x= (rand() % (max - min + 1)) + min; //will give num between range of max and min

**C doesn't automatically clear out memory automatically.
- array
    - A fixed-size collection of elements of the same data type.
    Partially initializing array:
    int scores[5] = {0}; //would initialize all address values as 0 instead of garbage value.
    example codes: arrayAverage.c
    - 2D array: an array where each element is an array
    especially useful if need grid or matrix of data
    But drawback is that number of columns needs to be specified while intializing the array
    int numbers[][3] = {{},{},{}}
    - size of array = sizeof(arrayName) / sizeof(arrayName[0]);
    Example: int size = sizeof(scores) / sizeof(scores[0]);

    